### Guía Rápida para Gestionar la Aplicación con Docker Compose

Este archivo contiene los comandos esenciales para levantar y detener la aplicación completa (frontend y backend).

**Requisito Previo:** Tener Docker Desktop instalado y en ejecución en tu máquina.

---

### 1. Para Levantar la Aplicación

Este comando construirá las imágenes de Docker para el frontend y el backend, creará los contenedores y los iniciará para que funcionen juntos.

**Comando:**
```bash
docker-compose up --build
```

**Explicación Detallada:**
- **`docker-compose up`**: Es el comando principal que lee el archivo `docker-compose.yml` y pone en marcha todos los servicios definidos en él (en nuestro caso, los servicios `backend` y `frontend`).

- **`--build`**: Este flag es muy importante. Le dice a Docker Compose que, antes de iniciar los contenedores, debe **reconstruir las imágenes** si detecta algún cambio en sus archivos (como en un `Dockerfile` o en el código fuente de Python/React). 
  **Recomendación:** Acostúmbrate a usar `--build` casi siempre para asegurarte de que estás ejecutando la versión más reciente de tu código.

**¿Qué hacer después?**
Una vez que la terminal muestre los logs de ambos servicios y se estabilice, abre tu navegador y ve a `http://localhost:3000` para usar la aplicación.

---

### 2. Para Detener la Aplicación

Este comando detendrá los contenedores de forma segura y limpiará los recursos que estaban utilizando (como la red que los conectaba).

**Comando:**
```bash
docker-compose down
```

**Explicación Detallada:**
- **`docker-compose down`**: Es la contraparte de `up`. Busca los contenedores que fueron creados por este `docker-compose.yml` y los detiene y elimina. Es la forma correcta y limpia de parar la aplicación.

**Nota Importante sobre los Datos:**
Recuerda que, con la configuración actual, la base de datos vive dentro del contenedor del backend. Al ejecutar `docker-compose down`, el contenedor se elimina y, con él, **todos los datos de los rostros que hayas registrado en esa sesión se perderán**.
